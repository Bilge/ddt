# vim: set ft=zsh:
# This a basic test plan for running against ddt itself

describe 'ddt(1) self-test'

# Allow setting the command path with DDT_PREFIX
if [[ -n "${DDT_PREFIX}" ]]; then
	cmd="${DDT_PREFIX}/ddt"
# Otherwise we'll use the caller instead of just checking PATH,
# in order to ensure we can run unit tests against versions we're building
else
	# This is a trick to get the absolute path to $0
	dir="$(
		pushd "$( dirname "${0}" )" > /dev/null 2>&1 &&
		pwd &&
		popd > /dev/null 2>&1
	)"
	cmd="${dir}/$( basename "${0}" )"
fi

prereq() {
	[[ -x "${cmd}" ]]
}

passes_lint_check() {
	output="$( bash -n "${cmd}" 2>&1 || true )"

	[[ -z "${output}" ]]
}

returns_brief_usage_with_invalid_option() {
	output="$( "${cmd}" -Z 2>&1 || true )"

	grep -qF 'invalid' <<< "${output}" &&
	grep -qF 'usage:' <<< "${output}"
}

returns_full_usage_with_--help() {
	output="$( "${cmd}" --help 2>&1 || true )"

	grep -qF 'options:' <<< "${output}"
}

returns_full_version_information_with_-V() {
	output="$( "${cmd}" -V 2>&1 || true )"

	grep -qiF 'ddt rev' <<< "${output}" &&
	grep -qiF 'copyright' <<< "${output}"
}

returns_brief_version_information_with_-qV() {
	output="$( "${cmd}" -qV 2>&1 || true )"

	grep -qiF 'ddt rev' <<< "${output}" &&
	[[ "$( grep -c '.' <<< "${output}" )" == '1' ]]
}

checks_current_directory_when_plan_not_specified() {
	(
		cd "${DDT_CWD}/sub-tests"

		tests="$( find "${PWD}" -name '*.ddtt' )"

		output="$( "${cmd}" -W 2>&1 || true )"

		[[ "${tests}" == "${output}" ]]
	)
}

supports_file_names_with_spaces() {
	output="$( "${cmd}" '/a/b/c/%fake file name%' 2>&1 || true )"

	grep -q "^ddt: File '/a/b/c/%fake file name%'" <<< "${output}"

	output="$( "${cmd}" "${DDT_CWD}/sub-tests/file name with spaces.ddtt" 2>&1 || true )"

	grep -qE '^1 .* performed, 1 .* passed, 0 .* failed' <<< "${output}"
}

supports_FIFOs() {
	output="$( ddt <( echo $'true_test() {\ntrue\n}' ) 2>&1 || true )"

	grep -q 'true test.*PASS' <<< "${output}" &&
	grep -q 'ddt test results' <<< "${output}"
}

rejects_1_erroneous_file_name() {
	output="$( ddt '/a/b/c/%ddt%test%' 2>&1 || true )"

	lines="$( grep -c '.' <<< "${output}" )"
	 text="$( grep -c '^ddt: File' <<< "${output}" )"

	[[ "${lines} ${text}" == '1 1' ]]
}

rejects_3_erroneous_file_names() {
	output="$( ddt '/a/b/c/%ddt%test1%' '/a/b/c/%ddt%test2%' '/a/b/c/%ddt%test3%' 2>&1 || true )"

	lines="$( grep -c '.' <<< "${output}" )"
	 text="$( grep -c '^ddt: File' <<< "${output}" )"

	[[ "${lines} ${text}" == '3 3' ]]
}

rejects_invalid_binary_file() {
	output="$( ddt '/bin/sh' 2>&1 || true )"

	lines="$( grep -c '.' <<< "${output}" )"
	 text="$( grep -c '^ddt: .* valid' <<< "${output}" )"

	[[ "${lines} ${text}" == '1 1' ]]
}

skips_plans_with_unmet_prerequisites() {
	output="$( ddt "${DDT_CWD}/sub-tests/prequisites.ddtt" 2>&1 || true )"

	grep -qF 'SKIP' <<< "${output}" &&
	grep -qE '^0 .* performed, 0 .* passed, 0 .* failed' <<< "${output}"
}

before() {
	beforeVariable="$$"
}

runs_before_function_prior_to_testing() {
	[[ "${beforeVariable}" == "$$" ]]
}


