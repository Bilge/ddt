{"name":"ddt","tagline":"A unit-testing tool for shell scripts, based on roundup.","body":"# ddt\r\n\r\n**ddt** is a unit-testing tool for shell scripts and other command-line applications which is based on (and compatible with) [roundup](https://github.com/bmizerany/roundup). The main improvements over roundup are GNU-style argument handling, better file handling, better error handling, more options, and (IMO) nicer output. I feel that it's also easier to maintain, since it is written for bash 4+, although this does of course make it less portable.\r\n\r\n## screen-shot\r\n\r\n![screen-shot](https://raw.github.com/okdana/ddt/master/documentation/screenshot.png)\r\n\r\n## explanation\r\n\r\n**ddt** works with roundup(5)-style test plans, which are simply shell scripts containing one or more function definitions, or tests. When pointed to a test plan, **ddt** sources it in a sub-shell and calls each function/test. If the function returns with `0` (the standard return code for success), it is considered a passed test. Otherwise, it is considered failed, and **ddt** will optionally (with `-v`) show you a trace indicating why.\r\n\r\nExample:\r\n\r\n```bash\r\n# This test simply executes `myapp` with no arguments, and pipes its output to\r\n# `grep` to ensure it displays usage information as expected. If the information\r\n# is there, `grep` will return with 0, and the test will pass.\r\nreturns_usage_with_no_arguments() {\r\n\tmyapp 2>&1 | grep -q 'usage:'\r\n}\r\n```\r\n\r\n## todo\r\n\r\n- Add basic argument handling for systems without extended getopt.\r\n- Add support for specifying directories in addition to individual files.\r\n- Figure out weird recursive testing problems.\r\n- Improve function definition syntax parsing.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}